{"version":3,"sources":["CommandUsage.ts"],"names":[],"mappings":"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","file":"CommandUsage.js","sourcesContent":["import { Client, Plugin, IPlugin, PluginConstructor, ListenerUtil, Lang, SharedProviderStorage } from '@yamdbf/core';\nimport { Message, TextChannel, MessageEmbed } from 'discord.js';\nimport { commandUsageFactory } from './commandUsageFactory';\nimport { StorageKeys } from './StorageKeys';\nimport UsageStats from './commands/UsageStats';\nimport * as path from 'path';\n\nconst { on, registerListeners } = ListenerUtil;\n\nexport class CommandUsage extends Plugin implements IPlugin\n{\n\tpublic static readonly default: (channel: string) => PluginConstructor = commandUsageFactory;\n\tpublic static readonly commandUsage: (channel: string) => PluginConstructor = commandUsageFactory;\n\tpublic static readonly CommandUsage: PluginConstructor = CommandUsage;\n\n\tpublic readonly name: string = 'CommandUsage';\n\n\tpublic commandsUsed: { [command: string]: number };\n\tpublic sessionUsages: [string, number][] = [];\n\tpublic sessionUsed: { [command: string]: number } = {};\n\n\tprivate readonly _client: Client;\n\tprivate readonly _channelID: string;\n\tprivate _storage: SharedProviderStorage;\n\tprivate _channel: TextChannel;\n\n\tpublic constructor(client: Client, channel: string = '')\n\t{\n\t\tsuper();\n\t\tthis._client = client;\n\t\tthis._channelID = channel;\n\t}\n\n\tpublic async init(storage: SharedProviderStorage): Promise<void>\n\t{\n\t\tthis._storage = storage;\n\n\t\tif (this._channelID)\n\t\t{\n\t\t\tthis._channel = <TextChannel> this._client.channels.get(this._channelID);\n\t\t\tif (!this._channel) throw new Error(`CommandUsage: Failed to find channel with ID '${this._channelID}'`);\n\t\t}\n\n\t\tthis.commandsUsed = await this._storage.get(StorageKeys.USAGE) || {};\n\n\t\tthis._client.commands.registerExternal(new UsageStats(this));\n\t\tregisterListeners(this._client, this);\n\n\t\tLang.loadGroupLocalizationsFrom(path.resolve(__dirname, './locale'));\n\t}\n\n\t@on('command')\n\tprivate async _onCommand(name: string, args: any[], exec: number, message: Message): Promise<void>\n\t{\n\t\tif (this._channel) this.logCommand(name, args, exec, message);\n\t\tif (name !== 'usagestats') this._incrementCommand(name);\n\t}\n\n\t/**\n\t * Increment command usages for the given command,\n\t * filter out the old usages. Used internally by the\n\t * plugin and the `usagestats` command\n\t */\n\tpublic _incrementCommand(name: string): void\n\t{\n\t\tthis.sessionUsages.push([name, Date.now()]);\n\t\tthis.sessionUsages = this.sessionUsages.filter(u => (Date.now() - u[1]) < (1e3 * 60 * 60 * 24));\n\t\tthis.commandsUsed[name] = (this.commandsUsed[name] || 0) + 1;\n\t\tthis.sessionUsed[name] = (this.sessionUsed[name] || 0) + 1;\n\n\t\tthis._storage.set(StorageKeys.USAGE, this.commandsUsed);\n\t}\n\n\t/**\n\t * The total number of commands used since tracking began\n\t */\n\tpublic get totalUsed(): number\n\t{\n\t\treturn Object.keys(this.commandsUsed).map(a => this.commandsUsed[a]).reduce((a, b) => a + b);\n\t}\n\n\t/**\n\t * The total number of commands used this session\n\t */\n\tpublic get totalSessionUsed(): number\n\t{\n\t\treturn Object.keys(this.sessionUsed).map(a => this.sessionUsed[a]).reduce((a, b) => a + b);\n\t}\n\n\t/**\n\t * Log command usage to the log channel\n\t */\n\tprivate async logCommand(name: string, args: any[], exec: number, message: Message): Promise<void>\n\t{\n\t\tconst logChannel: TextChannel = <TextChannel> this._channel;\n\t\tconst embed: MessageEmbed = new MessageEmbed()\n\t\t\t.setColor(11854048)\n\t\t\t.setAuthor(`${message.author.tag} (${message.author.id})`, message.author.avatarURL());\n\n\t\tif (message.guild) embed.addField('Guild', message.guild.name, true);\n\n\t\tembed.addField('Exec time', `${exec.toFixed(2)}ms`, true)\n\t\t\t.addField('Command content', message.content)\n\t\t\t.setFooter(message.channel.type.toUpperCase(), this._client.user.avatarURL())\n\t\t\t.setTimestamp();\n\n\t\tlogChannel.send({ embed });\n\t}\n}\n"],"sourceRoot":"../src"}